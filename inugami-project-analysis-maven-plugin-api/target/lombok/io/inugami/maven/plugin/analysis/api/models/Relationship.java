// Generated by delombok at Mon Mar 08 22:38:41 CET 2021
/* --------------------------------------------------------------------
 *  Inugami
 * --------------------------------------------------------------------
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.inugami.maven.plugin.analysis.api.models;

import io.inugami.api.models.data.basic.JsonObject;
import lombok.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;

public class Relationship implements JsonObject, Comparable<Relationship> {
    private static final long serialVersionUID = 973646684487506001L;
    private String from;
    private String to;
    private String type;
    private LinkedHashMap<String, Serializable> properties;

    @Override
    public int compareTo(final Relationship other) {
        return buildHash().compareTo(other.buildHash());
    }

    protected String buildHash() {
        return new StringBuilder().append(from).append("-[").append(type).append("]->").append(to).toString();
    }


    public static class RelationshipBuilder {
        @java.lang.SuppressWarnings("all")
        private String from;
        @java.lang.SuppressWarnings("all")
        private String to;
        @java.lang.SuppressWarnings("all")
        private String type;
        private LinkedHashMap<String, Serializable> properties;

        public Relationship.RelationshipBuilder properties(final LinkedHashMap<String, Serializable> properties) {
            if (properties != null) {
                this.properties = new LinkedHashMap<>();
                final List<String> keys = new ArrayList<>(properties.keySet());
                Collections.sort(keys);
                for (final String key : keys) {
                    this.properties.put(key, properties.get(key));
                }
            }
            return this;
        }

        @java.lang.SuppressWarnings("all")
        RelationshipBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public Relationship.RelationshipBuilder from(final String from) {
            this.from = from;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public Relationship.RelationshipBuilder to(final String to) {
            this.to = to;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public Relationship.RelationshipBuilder type(final String type) {
            this.type = type;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public Relationship build() {
            return new Relationship(this.from, this.to, this.type, this.properties);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "Relationship.RelationshipBuilder(from=" + this.from + ", to=" + this.to + ", type=" + this.type + ", properties=" + this.properties + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static Relationship.RelationshipBuilder builder() {
        return new Relationship.RelationshipBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public Relationship.RelationshipBuilder toBuilder() {
        return new Relationship.RelationshipBuilder().from(this.from).to(this.to).type(this.type).properties(this.properties);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "Relationship(from=" + this.getFrom() + ", to=" + this.getTo() + ", type=" + this.getType() + ", properties=" + this.getProperties() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Relationship)) return false;
        final Relationship other = (Relationship) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$from = this.getFrom();
        final java.lang.Object other$from = other.getFrom();
        if (this$from == null ? other$from != null : !this$from.equals(other$from)) return false;
        final java.lang.Object this$to = this.getTo();
        final java.lang.Object other$to = other.getTo();
        if (this$to == null ? other$to != null : !this$to.equals(other$to)) return false;
        final java.lang.Object this$type = this.getType();
        final java.lang.Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Relationship;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $from = this.getFrom();
        result = result * PRIME + ($from == null ? 43 : $from.hashCode());
        final java.lang.Object $to = this.getTo();
        result = result * PRIME + ($to == null ? 43 : $to.hashCode());
        final java.lang.Object $type = this.getType();
        result = result * PRIME + ($type == null ? 43 : $type.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    public String getFrom() {
        return this.from;
    }

    @java.lang.SuppressWarnings("all")
    public String getTo() {
        return this.to;
    }

    @java.lang.SuppressWarnings("all")
    public String getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    public LinkedHashMap<String, Serializable> getProperties() {
        return this.properties;
    }

    @java.lang.SuppressWarnings("all")
    public Relationship() {
    }

    @java.lang.SuppressWarnings("all")
    public Relationship(final String from, final String to, final String type, final LinkedHashMap<String, Serializable> properties) {
        this.from = from;
        this.to = to;
        this.type = type;
        this.properties = properties;
    }
}
