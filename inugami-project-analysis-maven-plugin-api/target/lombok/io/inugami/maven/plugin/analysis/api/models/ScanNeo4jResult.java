// Generated by delombok at Mon Mar 08 22:38:41 CET 2021
package io.inugami.maven.plugin.analysis.api.models;

import io.inugami.api.models.data.basic.JsonObject;
import java.util.*;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import static io.inugami.maven.plugin.analysis.api.utils.NodeUtils.processIfNotNull;

public class ScanNeo4jResult implements JsonObject {
    private static final long serialVersionUID = -1885576008301619055L;
    private String type;
    private List<String> nodesToDeletes;
    private List<Node> nodes;
    private List<String> createScripts;
    private List<Relationship> relationships;
    private List<Relationship> relationshipsToDeletes;
    private List<String> deleteScripts;

    public ScanNeo4jResult() {
        nodesToDeletes = new ArrayList<>();
        nodes = new ArrayList<>();
        createScripts = new ArrayList<>();
        relationships = new ArrayList<>();
        relationshipsToDeletes = new ArrayList<>();
        deleteScripts = new ArrayList<>();
    }

    public ScanNeo4jResult(final String type, final List<String> nodesToDeletes, final List<Node> nodes, final List<String> createScripts, final List<Relationship> relationships, final List<Relationship> relationshipsToDeletes, final List<String> deleteScripts) {
        this();
        this.type = type;
        processIfNotNull(nodesToDeletes, this.nodesToDeletes::addAll);
        processIfNotNull(nodes, this.nodes::addAll);
        processIfNotNull(createScripts, this.createScripts::addAll);
        processIfNotNull(relationships, this.relationships::addAll);
        processIfNotNull(relationshipsToDeletes, this.relationshipsToDeletes::addAll);
        processIfNotNull(deleteScripts, this.deleteScripts::addAll);
    }

    public void sort() {
        Collections.sort(nodesToDeletes);
        Collections.sort(nodes);
        Collections.sort(createScripts);
        Collections.sort(relationships);
        Collections.sort(relationshipsToDeletes);
        Collections.sort(deleteScripts);
    }

    public ScanNeo4jResult addNode(final List<Node> values) {
        appendIfNotNull(values, nodes::addAll);
        return this;
    }

    public ScanNeo4jResult addNode(final Node... values) {
        appendIfNotNull(Arrays.asList(values), nodes::addAll);
        return this;
    }

    public ScanNeo4jResult addCreateScript(final List<String> values) {
        appendIfNotNull(values, createScripts::addAll);
        return this;
    }

    public ScanNeo4jResult addCreateScript(final String... values) {
        appendIfNotNull(Arrays.asList(values), createScripts::addAll);
        return this;
    }

    public ScanNeo4jResult addNodeToDelete(final List<String> uids) {
        processIfNotNull(uids, this.nodesToDeletes::addAll);
        return this;
    }

    public ScanNeo4jResult addNodeToDelete(final String... uids) {
        appendIfNotNull(Arrays.asList(uids), nodesToDeletes::addAll);
        return this;
    }

    public ScanNeo4jResult addRelationship(final List<Relationship> values) {
        processIfNotNull(values, this.relationships::addAll);
        return this;
    }

    public ScanNeo4jResult addRelationship(final Relationship... values) {
        processIfNotNull(Arrays.asList(values), this.relationships::addAll);
        return this;
    }

    public ScanNeo4jResult addRelationshipToDelete(final List<Relationship> values) {
        processIfNotNull(values, this.relationshipsToDeletes::addAll);
        return this;
    }

    public ScanNeo4jResult addRelationshipToDelete(final Relationship... values) {
        processIfNotNull(Arrays.asList(values), this.relationshipsToDeletes::addAll);
        return this;
    }

    public ScanNeo4jResult addDeleteScript(final List<String> values) {
        processIfNotNull(values, this.deleteScripts::addAll);
        return this;
    }

    public ScanNeo4jResult addDeleteScript(final String... values) {
        processIfNotNull(Arrays.asList(values), this.deleteScripts::addAll);
        return this;
    }

    private <T> void appendIfNotNull(final List<T> values, final Consumer<List<T>> consumer) {
        if (values != null) {
            consumer.accept(values.stream().filter(Objects::nonNull).collect(Collectors.toList()));
        }
    }

    public static void merge(final ScanNeo4jResult providerResult, final ScanNeo4jResult result) {
        if (providerResult != null && result != null) {
            //@formatter:off
            processIfNotNull(providerResult.getNodes(), values -> result.addNode(values));
            processIfNotNull(providerResult.getRelationships(), values -> result.addRelationship(values));
            processIfNotNull(providerResult.getNodesToDeletes(), values -> result.addNodeToDelete(values));
            processIfNotNull(providerResult.getRelationshipsToDeletes(), values -> result.addRelationshipToDelete(values));
            processIfNotNull(providerResult.getCreateScripts(), values -> result.addCreateScript(values));
            processIfNotNull(providerResult.getDeleteScripts(), values -> result.addDeleteScript(values));
        }
        //@formatter:on
    }


    @java.lang.SuppressWarnings("all")
    public static class ScanNeo4jResultBuilder {
        @java.lang.SuppressWarnings("all")
        private String type;
        @java.lang.SuppressWarnings("all")
        private List<String> nodesToDeletes;
        @java.lang.SuppressWarnings("all")
        private List<Node> nodes;
        @java.lang.SuppressWarnings("all")
        private List<String> createScripts;
        @java.lang.SuppressWarnings("all")
        private List<Relationship> relationships;
        @java.lang.SuppressWarnings("all")
        private List<Relationship> relationshipsToDeletes;
        @java.lang.SuppressWarnings("all")
        private List<String> deleteScripts;

        @java.lang.SuppressWarnings("all")
        ScanNeo4jResultBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public ScanNeo4jResult.ScanNeo4jResultBuilder type(final String type) {
            this.type = type;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanNeo4jResult.ScanNeo4jResultBuilder nodesToDeletes(final List<String> nodesToDeletes) {
            this.nodesToDeletes = nodesToDeletes;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanNeo4jResult.ScanNeo4jResultBuilder nodes(final List<Node> nodes) {
            this.nodes = nodes;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanNeo4jResult.ScanNeo4jResultBuilder createScripts(final List<String> createScripts) {
            this.createScripts = createScripts;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanNeo4jResult.ScanNeo4jResultBuilder relationships(final List<Relationship> relationships) {
            this.relationships = relationships;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanNeo4jResult.ScanNeo4jResultBuilder relationshipsToDeletes(final List<Relationship> relationshipsToDeletes) {
            this.relationshipsToDeletes = relationshipsToDeletes;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanNeo4jResult.ScanNeo4jResultBuilder deleteScripts(final List<String> deleteScripts) {
            this.deleteScripts = deleteScripts;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanNeo4jResult build() {
            return new ScanNeo4jResult(this.type, this.nodesToDeletes, this.nodes, this.createScripts, this.relationships, this.relationshipsToDeletes, this.deleteScripts);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "ScanNeo4jResult.ScanNeo4jResultBuilder(type=" + this.type + ", nodesToDeletes=" + this.nodesToDeletes + ", nodes=" + this.nodes + ", createScripts=" + this.createScripts + ", relationships=" + this.relationships + ", relationshipsToDeletes=" + this.relationshipsToDeletes + ", deleteScripts=" + this.deleteScripts + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static ScanNeo4jResult.ScanNeo4jResultBuilder builder() {
        return new ScanNeo4jResult.ScanNeo4jResultBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public ScanNeo4jResult.ScanNeo4jResultBuilder toBuilder() {
        return new ScanNeo4jResult.ScanNeo4jResultBuilder().type(this.type).nodesToDeletes(this.nodesToDeletes).nodes(this.nodes).createScripts(this.createScripts).relationships(this.relationships).relationshipsToDeletes(this.relationshipsToDeletes).deleteScripts(this.deleteScripts);
    }

    @java.lang.SuppressWarnings("all")
    public void setType(final String type) {
        this.type = type;
    }

    @java.lang.SuppressWarnings("all")
    public void setNodesToDeletes(final List<String> nodesToDeletes) {
        this.nodesToDeletes = nodesToDeletes;
    }

    @java.lang.SuppressWarnings("all")
    public void setNodes(final List<Node> nodes) {
        this.nodes = nodes;
    }

    @java.lang.SuppressWarnings("all")
    public void setCreateScripts(final List<String> createScripts) {
        this.createScripts = createScripts;
    }

    @java.lang.SuppressWarnings("all")
    public void setRelationships(final List<Relationship> relationships) {
        this.relationships = relationships;
    }

    @java.lang.SuppressWarnings("all")
    public void setRelationshipsToDeletes(final List<Relationship> relationshipsToDeletes) {
        this.relationshipsToDeletes = relationshipsToDeletes;
    }

    @java.lang.SuppressWarnings("all")
    public void setDeleteScripts(final List<String> deleteScripts) {
        this.deleteScripts = deleteScripts;
    }

    @java.lang.SuppressWarnings("all")
    public String getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getNodesToDeletes() {
        return this.nodesToDeletes;
    }

    @java.lang.SuppressWarnings("all")
    public List<Node> getNodes() {
        return this.nodes;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getCreateScripts() {
        return this.createScripts;
    }

    @java.lang.SuppressWarnings("all")
    public List<Relationship> getRelationships() {
        return this.relationships;
    }

    @java.lang.SuppressWarnings("all")
    public List<Relationship> getRelationshipsToDeletes() {
        return this.relationshipsToDeletes;
    }

    @java.lang.SuppressWarnings("all")
    public List<String> getDeleteScripts() {
        return this.deleteScripts;
    }
}
