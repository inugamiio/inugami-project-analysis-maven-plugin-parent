// Generated by delombok at Mon Mar 08 22:38:41 CET 2021
/* --------------------------------------------------------------------
 *  Inugami
 * --------------------------------------------------------------------
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.inugami.maven.plugin.analysis.api.models.rest;

import io.inugami.api.models.data.basic.JsonObject;
import lombok.*;

public class RestEndpoint implements JsonObject, Comparable<RestEndpoint> {
    private static final long serialVersionUID = -6556991122270585469L;
    private final String nickname;
    private final String uri;
    private final String verb;
    private final String headers;
    private final String body;
    private final String bodyRequireOnly;
    private final String consume;
    private final String produce;
    private final String description;
    private final String responseType;
    private final String responseTypeRequireOnly;
    private final String uid;
    private final String method;

    @Override
    public int compareTo(final RestEndpoint value) {
        int result = 0;
        if (value.getUri().equals(this.getUri())) {
            result = value.getVerb().compareTo(this.getVerb());
        } else {
            result = value.getUri().compareTo(this.getUri());
        }
        return result;
    }


    @java.lang.SuppressWarnings("all")
    public static class RestEndpointBuilder {
        @java.lang.SuppressWarnings("all")
        private String nickname;
        @java.lang.SuppressWarnings("all")
        private String uri;
        @java.lang.SuppressWarnings("all")
        private String verb;
        @java.lang.SuppressWarnings("all")
        private String headers;
        @java.lang.SuppressWarnings("all")
        private String body;
        @java.lang.SuppressWarnings("all")
        private String bodyRequireOnly;
        @java.lang.SuppressWarnings("all")
        private String consume;
        @java.lang.SuppressWarnings("all")
        private String produce;
        @java.lang.SuppressWarnings("all")
        private String description;
        @java.lang.SuppressWarnings("all")
        private String responseType;
        @java.lang.SuppressWarnings("all")
        private String responseTypeRequireOnly;
        @java.lang.SuppressWarnings("all")
        private String uid;
        @java.lang.SuppressWarnings("all")
        private String method;

        @java.lang.SuppressWarnings("all")
        RestEndpointBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder nickname(final String nickname) {
            this.nickname = nickname;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder uri(final String uri) {
            this.uri = uri;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder verb(final String verb) {
            this.verb = verb;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder headers(final String headers) {
            this.headers = headers;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder body(final String body) {
            this.body = body;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder bodyRequireOnly(final String bodyRequireOnly) {
            this.bodyRequireOnly = bodyRequireOnly;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder consume(final String consume) {
            this.consume = consume;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder produce(final String produce) {
            this.produce = produce;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder description(final String description) {
            this.description = description;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder responseType(final String responseType) {
            this.responseType = responseType;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder responseTypeRequireOnly(final String responseTypeRequireOnly) {
            this.responseTypeRequireOnly = responseTypeRequireOnly;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder uid(final String uid) {
            this.uid = uid;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint.RestEndpointBuilder method(final String method) {
            this.method = method;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public RestEndpoint build() {
            return new RestEndpoint(this.nickname, this.uri, this.verb, this.headers, this.body, this.bodyRequireOnly, this.consume, this.produce, this.description, this.responseType, this.responseTypeRequireOnly, this.uid, this.method);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "RestEndpoint.RestEndpointBuilder(nickname=" + this.nickname + ", uri=" + this.uri + ", verb=" + this.verb + ", headers=" + this.headers + ", body=" + this.body + ", bodyRequireOnly=" + this.bodyRequireOnly + ", consume=" + this.consume + ", produce=" + this.produce + ", description=" + this.description + ", responseType=" + this.responseType + ", responseTypeRequireOnly=" + this.responseTypeRequireOnly + ", uid=" + this.uid + ", method=" + this.method + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static RestEndpoint.RestEndpointBuilder builder() {
        return new RestEndpoint.RestEndpointBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public RestEndpoint.RestEndpointBuilder toBuilder() {
        return new RestEndpoint.RestEndpointBuilder().nickname(this.nickname).uri(this.uri).verb(this.verb).headers(this.headers).body(this.body).bodyRequireOnly(this.bodyRequireOnly).consume(this.consume).produce(this.produce).description(this.description).responseType(this.responseType).responseTypeRequireOnly(this.responseTypeRequireOnly).uid(this.uid).method(this.method);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof RestEndpoint)) return false;
        final RestEndpoint other = (RestEndpoint) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$nickname = this.getNickname();
        final java.lang.Object other$nickname = other.getNickname();
        if (this$nickname == null ? other$nickname != null : !this$nickname.equals(other$nickname)) return false;
        final java.lang.Object this$uri = this.getUri();
        final java.lang.Object other$uri = other.getUri();
        if (this$uri == null ? other$uri != null : !this$uri.equals(other$uri)) return false;
        final java.lang.Object this$verb = this.getVerb();
        final java.lang.Object other$verb = other.getVerb();
        if (this$verb == null ? other$verb != null : !this$verb.equals(other$verb)) return false;
        final java.lang.Object this$headers = this.getHeaders();
        final java.lang.Object other$headers = other.getHeaders();
        if (this$headers == null ? other$headers != null : !this$headers.equals(other$headers)) return false;
        final java.lang.Object this$body = this.getBody();
        final java.lang.Object other$body = other.getBody();
        if (this$body == null ? other$body != null : !this$body.equals(other$body)) return false;
        final java.lang.Object this$bodyRequireOnly = this.getBodyRequireOnly();
        final java.lang.Object other$bodyRequireOnly = other.getBodyRequireOnly();
        if (this$bodyRequireOnly == null ? other$bodyRequireOnly != null : !this$bodyRequireOnly.equals(other$bodyRequireOnly)) return false;
        final java.lang.Object this$consume = this.getConsume();
        final java.lang.Object other$consume = other.getConsume();
        if (this$consume == null ? other$consume != null : !this$consume.equals(other$consume)) return false;
        final java.lang.Object this$produce = this.getProduce();
        final java.lang.Object other$produce = other.getProduce();
        if (this$produce == null ? other$produce != null : !this$produce.equals(other$produce)) return false;
        final java.lang.Object this$description = this.getDescription();
        final java.lang.Object other$description = other.getDescription();
        if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;
        final java.lang.Object this$responseType = this.getResponseType();
        final java.lang.Object other$responseType = other.getResponseType();
        if (this$responseType == null ? other$responseType != null : !this$responseType.equals(other$responseType)) return false;
        final java.lang.Object this$responseTypeRequireOnly = this.getResponseTypeRequireOnly();
        final java.lang.Object other$responseTypeRequireOnly = other.getResponseTypeRequireOnly();
        if (this$responseTypeRequireOnly == null ? other$responseTypeRequireOnly != null : !this$responseTypeRequireOnly.equals(other$responseTypeRequireOnly)) return false;
        final java.lang.Object this$uid = this.getUid();
        final java.lang.Object other$uid = other.getUid();
        if (this$uid == null ? other$uid != null : !this$uid.equals(other$uid)) return false;
        final java.lang.Object this$method = this.getMethod();
        final java.lang.Object other$method = other.getMethod();
        if (this$method == null ? other$method != null : !this$method.equals(other$method)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof RestEndpoint;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $nickname = this.getNickname();
        result = result * PRIME + ($nickname == null ? 43 : $nickname.hashCode());
        final java.lang.Object $uri = this.getUri();
        result = result * PRIME + ($uri == null ? 43 : $uri.hashCode());
        final java.lang.Object $verb = this.getVerb();
        result = result * PRIME + ($verb == null ? 43 : $verb.hashCode());
        final java.lang.Object $headers = this.getHeaders();
        result = result * PRIME + ($headers == null ? 43 : $headers.hashCode());
        final java.lang.Object $body = this.getBody();
        result = result * PRIME + ($body == null ? 43 : $body.hashCode());
        final java.lang.Object $bodyRequireOnly = this.getBodyRequireOnly();
        result = result * PRIME + ($bodyRequireOnly == null ? 43 : $bodyRequireOnly.hashCode());
        final java.lang.Object $consume = this.getConsume();
        result = result * PRIME + ($consume == null ? 43 : $consume.hashCode());
        final java.lang.Object $produce = this.getProduce();
        result = result * PRIME + ($produce == null ? 43 : $produce.hashCode());
        final java.lang.Object $description = this.getDescription();
        result = result * PRIME + ($description == null ? 43 : $description.hashCode());
        final java.lang.Object $responseType = this.getResponseType();
        result = result * PRIME + ($responseType == null ? 43 : $responseType.hashCode());
        final java.lang.Object $responseTypeRequireOnly = this.getResponseTypeRequireOnly();
        result = result * PRIME + ($responseTypeRequireOnly == null ? 43 : $responseTypeRequireOnly.hashCode());
        final java.lang.Object $uid = this.getUid();
        result = result * PRIME + ($uid == null ? 43 : $uid.hashCode());
        final java.lang.Object $method = this.getMethod();
        result = result * PRIME + ($method == null ? 43 : $method.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "RestEndpoint(nickname=" + this.getNickname() + ", uri=" + this.getUri() + ", verb=" + this.getVerb() + ", headers=" + this.getHeaders() + ", body=" + this.getBody() + ", bodyRequireOnly=" + this.getBodyRequireOnly() + ", consume=" + this.getConsume() + ", produce=" + this.getProduce() + ", description=" + this.getDescription() + ", responseType=" + this.getResponseType() + ", responseTypeRequireOnly=" + this.getResponseTypeRequireOnly() + ", uid=" + this.getUid() + ", method=" + this.getMethod() + ")";
    }

    @java.lang.SuppressWarnings("all")
    private RestEndpoint(final String nickname, final String uri, final String verb, final String headers, final String body, final String bodyRequireOnly, final String consume, final String produce, final String description, final String responseType, final String responseTypeRequireOnly, final String uid, final String method) {
        this.nickname = nickname;
        this.uri = uri;
        this.verb = verb;
        this.headers = headers;
        this.body = body;
        this.bodyRequireOnly = bodyRequireOnly;
        this.consume = consume;
        this.produce = produce;
        this.description = description;
        this.responseType = responseType;
        this.responseTypeRequireOnly = responseTypeRequireOnly;
        this.uid = uid;
        this.method = method;
    }

    @java.lang.SuppressWarnings("all")
    public String getNickname() {
        return this.nickname;
    }

    @java.lang.SuppressWarnings("all")
    public String getUri() {
        return this.uri;
    }

    @java.lang.SuppressWarnings("all")
    public String getVerb() {
        return this.verb;
    }

    @java.lang.SuppressWarnings("all")
    public String getHeaders() {
        return this.headers;
    }

    @java.lang.SuppressWarnings("all")
    public String getBody() {
        return this.body;
    }

    @java.lang.SuppressWarnings("all")
    public String getBodyRequireOnly() {
        return this.bodyRequireOnly;
    }

    @java.lang.SuppressWarnings("all")
    public String getConsume() {
        return this.consume;
    }

    @java.lang.SuppressWarnings("all")
    public String getProduce() {
        return this.produce;
    }

    @java.lang.SuppressWarnings("all")
    public String getDescription() {
        return this.description;
    }

    @java.lang.SuppressWarnings("all")
    public String getResponseType() {
        return this.responseType;
    }

    @java.lang.SuppressWarnings("all")
    public String getResponseTypeRequireOnly() {
        return this.responseTypeRequireOnly;
    }

    @java.lang.SuppressWarnings("all")
    public String getUid() {
        return this.uid;
    }

    @java.lang.SuppressWarnings("all")
    public String getMethod() {
        return this.method;
    }
}
