// Generated by delombok at Mon Mar 08 22:38:41 CET 2021
/* --------------------------------------------------------------------
 *  Inugami
 * --------------------------------------------------------------------
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.inugami.maven.plugin.analysis.api.models;

import io.inugami.api.models.data.basic.JsonObject;
import lombok.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;

public class Node implements JsonObject, Comparable<Node> {
    private static final long serialVersionUID = 7519867544798392684L;
    private String type;
    private String name;
    private String uid;
    private LinkedHashMap<String, Serializable> properties;

    @Override
    public int compareTo(final Node other) {
        return buildHash().compareTo(other.buildHash());
    }

    private String buildHash() {
        return new StringBuilder().append(uid).append("<").append(type).append(">").append("{").append(properties).append("}").toString();
    }


    public static class NodeBuilder {
        @java.lang.SuppressWarnings("all")
        private String type;
        @java.lang.SuppressWarnings("all")
        private String name;
        @java.lang.SuppressWarnings("all")
        private String uid;
        private LinkedHashMap<String, Serializable> properties;

        public NodeBuilder properties(final LinkedHashMap<String, Serializable> properties) {
            if (properties != null) {
                this.properties = new LinkedHashMap<>();
                final List<String> keys = new ArrayList<>(properties.keySet());
                Collections.sort(keys);
                for (final String key : keys) {
                    this.properties.put(key, properties.get(key));
                }
            }
            return this;
        }

        @java.lang.SuppressWarnings("all")
        NodeBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public Node.NodeBuilder type(final String type) {
            this.type = type;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public Node.NodeBuilder name(final String name) {
            this.name = name;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public Node.NodeBuilder uid(final String uid) {
            this.uid = uid;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public Node build() {
            return new Node(this.type, this.name, this.uid, this.properties);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "Node.NodeBuilder(type=" + this.type + ", name=" + this.name + ", uid=" + this.uid + ", properties=" + this.properties + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static Node.NodeBuilder builder() {
        return new Node.NodeBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public Node.NodeBuilder toBuilder() {
        return new Node.NodeBuilder().type(this.type).name(this.name).uid(this.uid).properties(this.properties);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Node)) return false;
        final Node other = (Node) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$uid = this.getUid();
        final java.lang.Object other$uid = other.getUid();
        if (this$uid == null ? other$uid != null : !this$uid.equals(other$uid)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof Node;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $uid = this.getUid();
        result = result * PRIME + ($uid == null ? 43 : $uid.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "Node(type=" + this.getType() + ", name=" + this.getName() + ", uid=" + this.getUid() + ", properties=" + this.getProperties() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public void setType(final String type) {
        this.type = type;
    }

    @java.lang.SuppressWarnings("all")
    public void setName(final String name) {
        this.name = name;
    }

    @java.lang.SuppressWarnings("all")
    public void setUid(final String uid) {
        this.uid = uid;
    }

    @java.lang.SuppressWarnings("all")
    public void setProperties(final LinkedHashMap<String, Serializable> properties) {
        this.properties = properties;
    }

    @java.lang.SuppressWarnings("all")
    public String getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    public String getUid() {
        return this.uid;
    }

    @java.lang.SuppressWarnings("all")
    public LinkedHashMap<String, Serializable> getProperties() {
        return this.properties;
    }

    @java.lang.SuppressWarnings("all")
    public Node() {
    }

    @java.lang.SuppressWarnings("all")
    public Node(final String type, final String name, final String uid, final LinkedHashMap<String, Serializable> properties) {
        this.type = type;
        this.name = name;
        this.uid = uid;
        this.properties = properties;
    }
}
