// Generated by delombok at Mon Mar 08 22:38:55 CET 2021
/* --------------------------------------------------------------------
 *  Inugami
 * --------------------------------------------------------------------
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.inugami.maven.plugin.analysis.plugin.services.scan.git;

import java.time.LocalDateTime;

public class GitLog {
    // =========================================================================
    // ATTRIBUTES
    // =========================================================================
    private final int type;
    private final String message;
    private final String name;
    private final String author;
    private final String authorEmail;
    private final LocalDateTime date;

    // =========================================================================
    // OVERRIDES
    // =========================================================================
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        sb.append('[').append(date).append(']');
        sb.append('[').append(name).append(']');
        sb.append("(<").append(author).append('>').append(authorEmail).append(')');
        sb.append(message);
        return sb.toString();
    }

    @java.lang.SuppressWarnings("all")
    GitLog(final int type, final String message, final String name, final String author, final String authorEmail, final LocalDateTime date) {
        this.type = type;
        this.message = message;
        this.name = name;
        this.author = author;
        this.authorEmail = authorEmail;
        this.date = date;
    }


    @java.lang.SuppressWarnings("all")
    public static class GitLogBuilder {
        @java.lang.SuppressWarnings("all")
        private int type;
        @java.lang.SuppressWarnings("all")
        private String message;
        @java.lang.SuppressWarnings("all")
        private String name;
        @java.lang.SuppressWarnings("all")
        private String author;
        @java.lang.SuppressWarnings("all")
        private String authorEmail;
        @java.lang.SuppressWarnings("all")
        private LocalDateTime date;

        @java.lang.SuppressWarnings("all")
        GitLogBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public GitLog.GitLogBuilder type(final int type) {
            this.type = type;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public GitLog.GitLogBuilder message(final String message) {
            this.message = message;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public GitLog.GitLogBuilder name(final String name) {
            this.name = name;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public GitLog.GitLogBuilder author(final String author) {
            this.author = author;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public GitLog.GitLogBuilder authorEmail(final String authorEmail) {
            this.authorEmail = authorEmail;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public GitLog.GitLogBuilder date(final LocalDateTime date) {
            this.date = date;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public GitLog build() {
            return new GitLog(this.type, this.message, this.name, this.author, this.authorEmail, this.date);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "GitLog.GitLogBuilder(type=" + this.type + ", message=" + this.message + ", name=" + this.name + ", author=" + this.author + ", authorEmail=" + this.authorEmail + ", date=" + this.date + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static GitLog.GitLogBuilder builder() {
        return new GitLog.GitLogBuilder();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof GitLog)) return false;
        final GitLog other = (GitLog) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof GitLog;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        return result;
    }

    @java.lang.SuppressWarnings("all")
    public int getType() {
        return this.type;
    }

    @java.lang.SuppressWarnings("all")
    public String getMessage() {
        return this.message;
    }

    @java.lang.SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    public String getAuthor() {
        return this.author;
    }

    @java.lang.SuppressWarnings("all")
    public String getAuthorEmail() {
        return this.authorEmail;
    }

    @java.lang.SuppressWarnings("all")
    public LocalDateTime getDate() {
        return this.date;
    }
}
