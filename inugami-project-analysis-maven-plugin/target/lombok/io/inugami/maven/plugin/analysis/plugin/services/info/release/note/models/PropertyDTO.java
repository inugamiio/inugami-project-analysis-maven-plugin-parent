// Generated by delombok at Mon Mar 08 22:38:55 CET 2021
/* --------------------------------------------------------------------
 *  Inugami
 * --------------------------------------------------------------------
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.inugami.maven.plugin.analysis.plugin.services.info.release.note.models;

import io.inugami.api.models.data.basic.JsonObject;
import io.inugami.maven.plugin.analysis.api.utils.Constants;

public class PropertyDTO implements Comparable<PropertyDTO>, JsonObject {
    // =========================================================================
    // ATTRIBUTES
    // =========================================================================
    private static final long serialVersionUID = 6933793488352573741L;
    private final String name;
    private final String propertyType;
    private final String defaultValue;
    private final boolean mandatory;
    private final boolean useForConditionalBean;
    private final String constraintDetail;
    private final String constraintType;
    private final String artifact;

    // =========================================================================
    // API
    // =========================================================================
    @Override
    public int compareTo(final PropertyDTO other) {
        final String current = String.join(Constants.UNDERSCORE, String.valueOf(artifact), String.valueOf(name));
        final String otherProperty = String.join(Constants.UNDERSCORE, String.valueOf(other == null ? null : other.getArtifact()), String.valueOf(other == null ? null : other.getName()));
        return current.compareTo(otherProperty);
    }

    @java.lang.SuppressWarnings("all")
    PropertyDTO(final String name, final String propertyType, final String defaultValue, final boolean mandatory, final boolean useForConditionalBean, final String constraintDetail, final String constraintType, final String artifact) {
        this.name = name;
        this.propertyType = propertyType;
        this.defaultValue = defaultValue;
        this.mandatory = mandatory;
        this.useForConditionalBean = useForConditionalBean;
        this.constraintDetail = constraintDetail;
        this.constraintType = constraintType;
        this.artifact = artifact;
    }


    @java.lang.SuppressWarnings("all")
    public static class PropertyDTOBuilder {
        @java.lang.SuppressWarnings("all")
        private String name;
        @java.lang.SuppressWarnings("all")
        private String propertyType;
        @java.lang.SuppressWarnings("all")
        private String defaultValue;
        @java.lang.SuppressWarnings("all")
        private boolean mandatory;
        @java.lang.SuppressWarnings("all")
        private boolean useForConditionalBean;
        @java.lang.SuppressWarnings("all")
        private String constraintDetail;
        @java.lang.SuppressWarnings("all")
        private String constraintType;
        @java.lang.SuppressWarnings("all")
        private String artifact;

        @java.lang.SuppressWarnings("all")
        PropertyDTOBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO.PropertyDTOBuilder name(final String name) {
            this.name = name;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO.PropertyDTOBuilder propertyType(final String propertyType) {
            this.propertyType = propertyType;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO.PropertyDTOBuilder defaultValue(final String defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO.PropertyDTOBuilder mandatory(final boolean mandatory) {
            this.mandatory = mandatory;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO.PropertyDTOBuilder useForConditionalBean(final boolean useForConditionalBean) {
            this.useForConditionalBean = useForConditionalBean;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO.PropertyDTOBuilder constraintDetail(final String constraintDetail) {
            this.constraintDetail = constraintDetail;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO.PropertyDTOBuilder constraintType(final String constraintType) {
            this.constraintType = constraintType;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO.PropertyDTOBuilder artifact(final String artifact) {
            this.artifact = artifact;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public PropertyDTO build() {
            return new PropertyDTO(this.name, this.propertyType, this.defaultValue, this.mandatory, this.useForConditionalBean, this.constraintDetail, this.constraintType, this.artifact);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "PropertyDTO.PropertyDTOBuilder(name=" + this.name + ", propertyType=" + this.propertyType + ", defaultValue=" + this.defaultValue + ", mandatory=" + this.mandatory + ", useForConditionalBean=" + this.useForConditionalBean + ", constraintDetail=" + this.constraintDetail + ", constraintType=" + this.constraintType + ", artifact=" + this.artifact + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static PropertyDTO.PropertyDTOBuilder builder() {
        return new PropertyDTO.PropertyDTOBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public PropertyDTO.PropertyDTOBuilder toBuilder() {
        return new PropertyDTO.PropertyDTOBuilder().name(this.name).propertyType(this.propertyType).defaultValue(this.defaultValue).mandatory(this.mandatory).useForConditionalBean(this.useForConditionalBean).constraintDetail(this.constraintDetail).constraintType(this.constraintType).artifact(this.artifact);
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof PropertyDTO)) return false;
        final PropertyDTO other = (PropertyDTO) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$artifact = this.getArtifact();
        final java.lang.Object other$artifact = other.getArtifact();
        if (this$artifact == null ? other$artifact != null : !this$artifact.equals(other$artifact)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof PropertyDTO;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $artifact = this.getArtifact();
        result = result * PRIME + ($artifact == null ? 43 : $artifact.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "PropertyDTO(name=" + this.getName() + ", propertyType=" + this.getPropertyType() + ", defaultValue=" + this.getDefaultValue() + ", mandatory=" + this.isMandatory() + ", useForConditionalBean=" + this.isUseForConditionalBean() + ", constraintDetail=" + this.getConstraintDetail() + ", constraintType=" + this.getConstraintType() + ", artifact=" + this.getArtifact() + ")";
    }

    @java.lang.SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    public String getPropertyType() {
        return this.propertyType;
    }

    @java.lang.SuppressWarnings("all")
    public String getDefaultValue() {
        return this.defaultValue;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isMandatory() {
        return this.mandatory;
    }

    @java.lang.SuppressWarnings("all")
    public boolean isUseForConditionalBean() {
        return this.useForConditionalBean;
    }

    @java.lang.SuppressWarnings("all")
    public String getConstraintDetail() {
        return this.constraintDetail;
    }

    @java.lang.SuppressWarnings("all")
    public String getConstraintType() {
        return this.constraintType;
    }

    @java.lang.SuppressWarnings("all")
    public String getArtifact() {
        return this.artifact;
    }
}
