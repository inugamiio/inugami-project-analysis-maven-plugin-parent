// Generated by delombok at Mon Mar 08 22:38:49 CET 2021
/* --------------------------------------------------------------------
 *  Inugami
 * --------------------------------------------------------------------
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.inugami.maven.plugin.analysis.api.models.neo4j;

import lombok.*;

public class VersionNode {
    private final long id;
    private final String name;
    private final String groupId;
    private final String artifactId;
    private final String version;
    private final int major;
    private final int minor;
    private final int patch;
    private final String tag;
    private final String packaging;


    @java.lang.SuppressWarnings("all")
    public static class VersionNodeBuilder {
        @java.lang.SuppressWarnings("all")
        private long id;
        @java.lang.SuppressWarnings("all")
        private String name;
        @java.lang.SuppressWarnings("all")
        private String groupId;
        @java.lang.SuppressWarnings("all")
        private String artifactId;
        @java.lang.SuppressWarnings("all")
        private String version;
        @java.lang.SuppressWarnings("all")
        private int major;
        @java.lang.SuppressWarnings("all")
        private int minor;
        @java.lang.SuppressWarnings("all")
        private int patch;
        @java.lang.SuppressWarnings("all")
        private String tag;
        @java.lang.SuppressWarnings("all")
        private String packaging;

        @java.lang.SuppressWarnings("all")
        VersionNodeBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder id(final long id) {
            this.id = id;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder name(final String name) {
            this.name = name;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder groupId(final String groupId) {
            this.groupId = groupId;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder artifactId(final String artifactId) {
            this.artifactId = artifactId;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder version(final String version) {
            this.version = version;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder major(final int major) {
            this.major = major;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder minor(final int minor) {
            this.minor = minor;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder patch(final int patch) {
            this.patch = patch;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder tag(final String tag) {
            this.tag = tag;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode.VersionNodeBuilder packaging(final String packaging) {
            this.packaging = packaging;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public VersionNode build() {
            return new VersionNode(this.id, this.name, this.groupId, this.artifactId, this.version, this.major, this.minor, this.patch, this.tag, this.packaging);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "VersionNode.VersionNodeBuilder(id=" + this.id + ", name=" + this.name + ", groupId=" + this.groupId + ", artifactId=" + this.artifactId + ", version=" + this.version + ", major=" + this.major + ", minor=" + this.minor + ", patch=" + this.patch + ", tag=" + this.tag + ", packaging=" + this.packaging + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static VersionNode.VersionNodeBuilder builder() {
        return new VersionNode.VersionNodeBuilder();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof VersionNode)) return false;
        final VersionNode other = (VersionNode) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof VersionNode;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "VersionNode(id=" + this.getId() + ", name=" + this.getName() + ", groupId=" + this.getGroupId() + ", artifactId=" + this.getArtifactId() + ", version=" + this.getVersion() + ", major=" + this.getMajor() + ", minor=" + this.getMinor() + ", patch=" + this.getPatch() + ", tag=" + this.getTag() + ", packaging=" + this.getPackaging() + ")";
    }

    @java.lang.SuppressWarnings("all")
    private VersionNode(final long id, final String name, final String groupId, final String artifactId, final String version, final int major, final int minor, final int patch, final String tag, final String packaging) {
        this.id = id;
        this.name = name;
        this.groupId = groupId;
        this.artifactId = artifactId;
        this.version = version;
        this.major = major;
        this.minor = minor;
        this.patch = patch;
        this.tag = tag;
        this.packaging = packaging;
    }

    @java.lang.SuppressWarnings("all")
    public long getId() {
        return this.id;
    }

    @java.lang.SuppressWarnings("all")
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    public String getGroupId() {
        return this.groupId;
    }

    @java.lang.SuppressWarnings("all")
    public String getArtifactId() {
        return this.artifactId;
    }

    @java.lang.SuppressWarnings("all")
    public String getVersion() {
        return this.version;
    }

    @java.lang.SuppressWarnings("all")
    public int getMajor() {
        return this.major;
    }

    @java.lang.SuppressWarnings("all")
    public int getMinor() {
        return this.minor;
    }

    @java.lang.SuppressWarnings("all")
    public int getPatch() {
        return this.patch;
    }

    @java.lang.SuppressWarnings("all")
    public String getTag() {
        return this.tag;
    }

    @java.lang.SuppressWarnings("all")
    public String getPackaging() {
        return this.packaging;
    }
}
