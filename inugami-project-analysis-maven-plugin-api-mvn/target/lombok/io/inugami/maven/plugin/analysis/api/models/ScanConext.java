// Generated by delombok at Mon Mar 08 22:38:49 CET 2021
/* --------------------------------------------------------------------
 *  Inugami
 * --------------------------------------------------------------------
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package io.inugami.maven.plugin.analysis.api.models;

import io.inugami.api.processors.ConfigHandler;
import io.inugami.maven.plugin.analysis.api.services.neo4j.Neo4jDao;
import org.apache.maven.artifact.handler.ArtifactHandler;
import org.apache.maven.plugin.descriptor.PluginDescriptor;
import org.apache.maven.project.MavenProject;
import org.apache.maven.repository.RepositorySystem;
import org.apache.maven.settings.Settings;
import org.eclipse.aether.RepositorySystemSession;
import org.eclipse.aether.repository.RemoteRepository;
import org.sonatype.plexus.components.sec.dispatcher.SecDispatcher;
import org.xeustechnologies.jcl.JarClassLoader;
import java.io.File;
import java.util.List;
import java.util.Set;

public class ScanConext {
    private final File basedir;
    private final MavenProject project;
    private final RepositorySystem repoSystem;
    private final RepositorySystemSession repoSession;
    private final List<RemoteRepository> repositories;
    private final JarClassLoader classLoader;
    private final Set<Gav> dependencies;
    private final Set<Gav> directDependencies;
    private final PluginDescriptor pluginDescriptor;
    private final ConfigHandler<String, String> configuration;
    private final ScanNeo4jResult postNeo4jResult = new ScanNeo4jResult();
    private final SecDispatcher secDispatcher;
    private final ArtifactHandler artifactHandler;
    private final Settings settings;
    private final Neo4jDao neo4jDao;

    public <T> T getProperty(final String key) {
        T result = null;
        if (project != null && project.getProperties() != null) {
            result = (T) project.getProperties().get(key);
        }
        return result;
    }

    public <T> T getProperty(final String key, final T defaultValue) {
        T result = null;
        if (project != null && project.getProperties() != null) {
            result = (T) project.getProperties().getOrDefault(key, defaultValue);
        }
        return result;
    }


    @java.lang.SuppressWarnings("all")
    public static class ScanConextBuilder {
        @java.lang.SuppressWarnings("all")
        private File basedir;
        @java.lang.SuppressWarnings("all")
        private MavenProject project;
        @java.lang.SuppressWarnings("all")
        private RepositorySystem repoSystem;
        @java.lang.SuppressWarnings("all")
        private RepositorySystemSession repoSession;
        @java.lang.SuppressWarnings("all")
        private List<RemoteRepository> repositories;
        @java.lang.SuppressWarnings("all")
        private JarClassLoader classLoader;
        @java.lang.SuppressWarnings("all")
        private Set<Gav> dependencies;
        @java.lang.SuppressWarnings("all")
        private Set<Gav> directDependencies;
        @java.lang.SuppressWarnings("all")
        private PluginDescriptor pluginDescriptor;
        @java.lang.SuppressWarnings("all")
        private ConfigHandler<String, String> configuration;
        @java.lang.SuppressWarnings("all")
        private SecDispatcher secDispatcher;
        @java.lang.SuppressWarnings("all")
        private ArtifactHandler artifactHandler;
        @java.lang.SuppressWarnings("all")
        private Settings settings;
        @java.lang.SuppressWarnings("all")
        private Neo4jDao neo4jDao;

        @java.lang.SuppressWarnings("all")
        ScanConextBuilder() {
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder basedir(final File basedir) {
            this.basedir = basedir;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder project(final MavenProject project) {
            this.project = project;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder repoSystem(final RepositorySystem repoSystem) {
            this.repoSystem = repoSystem;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder repoSession(final RepositorySystemSession repoSession) {
            this.repoSession = repoSession;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder repositories(final List<RemoteRepository> repositories) {
            this.repositories = repositories;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder classLoader(final JarClassLoader classLoader) {
            this.classLoader = classLoader;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder dependencies(final Set<Gav> dependencies) {
            this.dependencies = dependencies;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder directDependencies(final Set<Gav> directDependencies) {
            this.directDependencies = directDependencies;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder pluginDescriptor(final PluginDescriptor pluginDescriptor) {
            this.pluginDescriptor = pluginDescriptor;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder configuration(final ConfigHandler<String, String> configuration) {
            this.configuration = configuration;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder secDispatcher(final SecDispatcher secDispatcher) {
            this.secDispatcher = secDispatcher;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder artifactHandler(final ArtifactHandler artifactHandler) {
            this.artifactHandler = artifactHandler;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder settings(final Settings settings) {
            this.settings = settings;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext.ScanConextBuilder neo4jDao(final Neo4jDao neo4jDao) {
            this.neo4jDao = neo4jDao;
            return this;
        }

        @java.lang.SuppressWarnings("all")
        public ScanConext build() {
            return new ScanConext(this.basedir, this.project, this.repoSystem, this.repoSession, this.repositories, this.classLoader, this.dependencies, this.directDependencies, this.pluginDescriptor, this.configuration, this.secDispatcher, this.artifactHandler, this.settings, this.neo4jDao);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        public java.lang.String toString() {
            return "ScanConext.ScanConextBuilder(basedir=" + this.basedir + ", project=" + this.project + ", repoSystem=" + this.repoSystem + ", repoSession=" + this.repoSession + ", repositories=" + this.repositories + ", classLoader=" + this.classLoader + ", dependencies=" + this.dependencies + ", directDependencies=" + this.directDependencies + ", pluginDescriptor=" + this.pluginDescriptor + ", configuration=" + this.configuration + ", secDispatcher=" + this.secDispatcher + ", artifactHandler=" + this.artifactHandler + ", settings=" + this.settings + ", neo4jDao=" + this.neo4jDao + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    public static ScanConext.ScanConextBuilder builder() {
        return new ScanConext.ScanConextBuilder();
    }

    @java.lang.SuppressWarnings("all")
    public File getBasedir() {
        return this.basedir;
    }

    @java.lang.SuppressWarnings("all")
    public MavenProject getProject() {
        return this.project;
    }

    @java.lang.SuppressWarnings("all")
    public RepositorySystem getRepoSystem() {
        return this.repoSystem;
    }

    @java.lang.SuppressWarnings("all")
    public RepositorySystemSession getRepoSession() {
        return this.repoSession;
    }

    @java.lang.SuppressWarnings("all")
    public List<RemoteRepository> getRepositories() {
        return this.repositories;
    }

    @java.lang.SuppressWarnings("all")
    public JarClassLoader getClassLoader() {
        return this.classLoader;
    }

    @java.lang.SuppressWarnings("all")
    public Set<Gav> getDependencies() {
        return this.dependencies;
    }

    @java.lang.SuppressWarnings("all")
    public Set<Gav> getDirectDependencies() {
        return this.directDependencies;
    }

    @java.lang.SuppressWarnings("all")
    public PluginDescriptor getPluginDescriptor() {
        return this.pluginDescriptor;
    }

    @java.lang.SuppressWarnings("all")
    public ConfigHandler<String, String> getConfiguration() {
        return this.configuration;
    }

    @java.lang.SuppressWarnings("all")
    public ScanNeo4jResult getPostNeo4jResult() {
        return this.postNeo4jResult;
    }

    @java.lang.SuppressWarnings("all")
    public SecDispatcher getSecDispatcher() {
        return this.secDispatcher;
    }

    @java.lang.SuppressWarnings("all")
    public ArtifactHandler getArtifactHandler() {
        return this.artifactHandler;
    }

    @java.lang.SuppressWarnings("all")
    public Settings getSettings() {
        return this.settings;
    }

    @java.lang.SuppressWarnings("all")
    public Neo4jDao getNeo4jDao() {
        return this.neo4jDao;
    }

    @java.lang.SuppressWarnings("all")
    private ScanConext(final File basedir, final MavenProject project, final RepositorySystem repoSystem, final RepositorySystemSession repoSession, final List<RemoteRepository> repositories, final JarClassLoader classLoader, final Set<Gav> dependencies, final Set<Gav> directDependencies, final PluginDescriptor pluginDescriptor, final ConfigHandler<String, String> configuration, final SecDispatcher secDispatcher, final ArtifactHandler artifactHandler, final Settings settings, final Neo4jDao neo4jDao) {
        this.basedir = basedir;
        this.project = project;
        this.repoSystem = repoSystem;
        this.repoSession = repoSession;
        this.repositories = repositories;
        this.classLoader = classLoader;
        this.dependencies = dependencies;
        this.directDependencies = directDependencies;
        this.pluginDescriptor = pluginDescriptor;
        this.configuration = configuration;
        this.secDispatcher = secDispatcher;
        this.artifactHandler = artifactHandler;
        this.settings = settings;
        this.neo4jDao = neo4jDao;
    }
}
